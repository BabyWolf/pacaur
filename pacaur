#!/usr/bin/env bash
#
# pacaur: an AUR helper that minimizes user interaction
# Dependencies: makepkg (pacman), pacman, expac, auracle (auracle-git)
#

# gettext initialization
export LC_COLLATE=C
export TEXTDOMAIN='pacaur'
export TEXTDOMAINDIR='/usr/share/locale'

declare -r pacaur_version='4.8.6'
declare -r confdir='/etc'

LIBRARY="${LIBRARY:-/usr/share/makepkg}"
LIBPACAUR="${LIBPACAUR:-/usr/share/pacaur}"

# Options
ASDEPS=0
ASEXPLICIT=0
AUR=0
CCOUNT=0
CHECKDEPS=0
COLOR=''
DCOUNT=0
DEVEL=0
DOWNLOADONLY=0
INFO=0
INSTALLPKG=0
NATIVE=0
NEEDED=0
NOCONFIRM=0
NODEPS=0
NOOP=0
OPERATION=''
PAC=0
REBUILD=0
REFRESH=0
REPO=0
SEARCH=0
UPGRADE=0
VER=0

export QUIET

PACMAN_ARGS=()
PACMAN_OPTS=()
MAKEPKG_OPTS+=()
AURACLE_OPTS=()

shopt -s extglob

# Import libmakepkg
for lib in parseopts util option error; do
    source "${LIBRARY}/util/${lib}.sh"
done
check_buildoption "check" "y" && CHECKDEPS=1

# import libpacaur
for lib in "$LIBPACAUR"/*.sh; do
    source "$lib"
done

# determine config location
if [[ "${XDG_CONFIG_DIRS}" ]]; then
    for dir in ${XDG_CONFIG_DIRS//:/ }; do
        [[ -d "$dir/pacaur" ]] && export XDG_CONFIG_DIRS="$dir" && break
    done
fi
configdir="${XDG_CONFIG_DIRS:-"${confdir}/xdg"}/pacaur"
userconfigdir="${XDG_CONFIG_HOME:-"${HOME}/.config"}/pacaur"
userpacmandir="${XDG_CONFIG_HOME:-"${HOME}/.config"}/pacman"
usercachedir="${XDG_CACHE_HOME:-"${HOME}/.cache"}/pacaur"
tmpdir="${XDG_RUNTIME_DIR:-'/tmp'}"

# preserve environment variables
mapfile -td$'\n' restore_envvars < \
    <(declare -p PACMAN {PKG,SRC}{DEST,EXT} {SRCPKG,LOG}DEST BUILDDIR GPGKEY PACKAGER CARCH 2>/dev/null)

# source makepkg variables
if [[ -r "$MAKEPKG_CONF" ]]; then
    source "$MAKEPKG_CONF"
else
    source "$confdir/makepkg.conf"
    if [[ -r "$userpacmandir/makepkg.conf" ]]; then
        source "$userpacmandir/makepkg.conf"
    elif [[ -r "$HOME/.makepkg.conf" ]]; then
        source "$HOME/.makepkg.conf"
    fi
fi

# restore environment variables
for i in "${restore_envvars[@]}"; do
    : "$i"
done

# set default config variables
editor="${VISUAL:-"${EDITOR:-vi}"}"         # build files editor
displaybuildfiles=diff                      # display build files (none|diff|full)
silent=false                                # silence output
sortby=name                                 # sort method (name|votes|popularity)
sortorder=ascending                         # sort order (ascending|descending)
sudoloop=true                               # prevent sudo timeout

# set variables
PACMAN="${PACMAN:-pacman}"                  # pacman binary
clonedir="${AURDEST:-${usercachedir:?}}"    # clone directory

# source xdg config
[[ -r "$configdir/config" ]] && source "$configdir/config"
[[ -r "$userconfigdir/config" ]] && source "$userconfigdir/config"

# determine whether we have gettext; make it a no-op if we do not
type -p gettext &>/dev/null || gettext() { printf '%s\n' "$@"; }

# define vcs packages
declare -r vcs='-(cvs|svn|git|hg|bzr|darcs|daily.*|nightly.*)$'

# set variables to readonly and setup clonedir
declare -r clonedir configdir userconfigdir userpacmandir usercachedir tmpdir
mkdir -pm700 "$clonedir"

#
# Main
#

trap Cancel INT

# options
OPT_SHORT="DFQRSTUVacdefghiklmnopqrstuvwxy"
OPT_LONG=('help' 'database' 'files' 'query' 'remove' 'sync' 'deptest' 'upgrade')
OPT_LONG+=('asdeps' 'asexplicit' 'cascade' 'changelog' 'check' 'confirm' 'dbonly' 'debug' 'deps'
           'disable-download-timeout' 'downloadonly' 'explicit' 'file' 'foreign' 'groups' 'info'
           'list' 'machinereadable' 'native' 'needed' 'noconfirm' 'nodeps' 'noprogressbar' 'nosave'
           'noscriptlet' 'owns' 'print' 'recursive' 'refresh' 'regex' 'quiet' 'search' 'sysupgrade'
           'unneeded' 'unrequired' 'upgrades' 'verbose')
OPT_LONG+=('arch:' 'assume-installed:' 'cachedir:' 'color:' 'config:' 'dbpath:' 'gpgdir:' 'hookdir:'
           'ignore:' 'ignoregroup:' 'logfile:' 'overwrite:' 'print-format:' 'root:' 'sysroot:')
OPT_LONG_AUR=('aur' 'by:' 'devel' 'edit' 'literal' 'noedit' 'rebuild' 'repo' 'rsort:' 'searchby:'
              'silent' 'sort:' 'update' 'version')
parseopts "${OPT_SHORT}" "${OPT_LONG[@]}" "${OPT_LONG_AUR[@]}" -- "$@" || exit "$E_INVALID_OPTION"
set -- "${OPTRET[@]}"

while true; do
    [[ "$1" = -[cdf-qs-zDFQRSTUV] ]] && PACMAN_ARGS+=("$1")
    for i in "${OPT_LONG[@]}"; do
        [[ "$1" = "--$i" ]] && PACMAN_OPTS+=("$1")
        [[ "$1": = "--$i" ]] && PACMAN_OPTS+=("$1=$2")
    done
    case "$1" in
        -S|--sync) PACS=1; INSTALLPKG=1; OPERATION=sync; ((++PAC));;
        -Q|--query) PACQ=1; ((++PAC));;
        -s|--search) SEARCH=1;;
        -i|--info) INFO=1;;
        -e|--edit) PACE=1;;
        -u|--upgrades|--sysupgrade) UPGRADE=1;;
        -q|--quiet) QUIET=1; AURACLE_OPTS+=("$1");;
        -c|--clean) CLEANCACHE=1 && ((++CCOUNT));;
        -n|--native) NATIVE=1;;
        -r|--repo) REPO=1;;
        -a|--aur) AUR=1;;
        --ignore) ignoredpkgs+=("$2"); shift;;
        --color) COLOR="$2"; shift;;
        --literal) AURACLE_OPTS+=("$1");;
        --*(search)by) AURACLE_OPTS+=("--searchby=$2"); shift;;
        --sort) sortorder="ascending"; sortby="$2"; shift;;
        --rsort) sortorder="descending"; sortby="$2"; shift;;
        -d|--nodeps) NODEPS=1; MAKEPKG_OPTS+=("$1"); ((++DCOUNT));;
        --assume-installed) assumeinstalled+=("$2"); shift;;
        -[DFRTUV--@(database|files|remove|deptest|upgrade)) ((++PAC));;
        --@(asdeps|asexplicit|devel|needed|noconfirm|noedit|rebuild)) i="${1#--}"; declare "${i^^}"=1; unset i;;
        -[glp]|--@(groups|list|print)) NOOP=1;;
        -w|--downloadonly) DOWNLOADONLY=1;;
        --silent) silent=true; PACMAN_ARGS+=("-q"); AURACLE_OPTS+=("-q") MAKEPKG_OPTS+=("-L");;
        -y|--refresh) REFRESH=1;;
        -h|--help) HELP=1;;
        --version) OPERATION=version; ((++PAC));;
        -v) VER=1;;
        --) shift; break;;
    esac
    shift
done

# help or version
[[ "$OPERATION" = version ]] || (( PAC == 0 && VER )) && printf '%s\n' "pacaur $pacaur_version" && exit "$E_OK"
(( PAC == 0 && HELP )) && Usage

# sorting
case "$sortorder" in
    ascending)  AURACLE_OPTS+=("--sort=$sortby");;
    descending) AURACLE_OPTS+=("--rsort=$sortby");;
esac

# packages
pkgs=("$@")

# Color
if [[ ! "$COLOR" ]]; then
    [[ ! "$(pacman-conf Color)" || "$OPERATION" = upgrades ]] || (( QUIET && SEARCH )) &&
        COLOR=never || COLOR=auto
fi
PACMAN_OPTS+=("--color=$COLOR") && AURACLE_OPTS+=("--color=$COLOR")
if [[ ! "$COLOR" = never ]]; then
    ALL_OFF="\e[0m"; RED="\e[1;31m"; GREEN="\e[1;32m"; YELLOW="\e[1;33m"
    BLUE="\e[1;34m"; MAGENTA="\e[1;35m"; WHITE="\e[1;39m"
else
    ALL_OFF='' RED='' GREEN='' YELLOW='' BLUE='' MAGENTA='' WHITE='' MAKEPKG_OPTS+=('-m')
fi

# sanity check
(( AUR )) && REFRESH=0
(( PAC == 0 && PACE )) && OPERATION=edit
(( PACQ && PACE )) && PACMAN_OPTS+=('-e')
(( PACQ && UPGRADE )) && OPERATION=upgrades
(( PACQ && NATIVE )) && REPO=1
(( PACS && UPGRADE )) && INSTALLPKG=1
(( PACS && DOWNLOADONLY )) && INSTALLPKG=0
(( PACS && NOOP )) && OPERATION=''
(( PACS && CLEANCACHE )) && SEARCH=0 INFO=0 UPGRADE=0
(( PAC > 1 )) && Note "e" $"only one operation may be used at a time" "$E_FAIL"
[[ "$OPERATION" = sync ]] && (( ! SEARCH && ! INFO && ! CLEANCACHE && EUID == 0 )) &&
    Note "e" $"you cannot perform this operation as root" "$E_ROOT"
(( PACS && SEARCH && INFO )) &&
    Note "e" $"invalid option: '--info' and '--search' may not be used together" "$E_INVALID_OPTION"
[[ "$(command -v "${editor%% *}")" ]] ||
    Note "e" $"${WHITE}\$VISUAL${ALL_OFF} and ${WHITE}\$EDITOR${ALL_OFF} environment variables not set or defined ${WHITE}editor${ALL_OFF} not found" "$E_MISSING_FILE"
[[ "$PACMAN" = "${0##*/}" ]] &&
    Note "e" $"you cannot use ${WHITE}pacaur${ALL_OFF} as PACMAN environment variable" "$E_FAIL"
[[ -w "$clonedir" ]] ||
    Note "e" $"${WHITE}$clonedir${ALL_OFF} does not have write permission" "$E_FS_PERMISSIONS"
(( ! REFRESH && ! UPGRADE && ! CLEANCACHE )) && [[ "${pkgs[*]}" && "$OPERATION" =~ (sync|edit) ]] &&
    Note "e" $"no targets specified (use -h for help)" "$E_FAIL"
    (( ! HELP )) && [[ ! "${pkgs[*]}" && " ${PACMAN_ARGS[*]} " =~ ' '-[RU]' ' ]] &&
    Note "e" $"no targets specified (use -h for help)" "$E_FAIL"
(( AUR && REPO )) && AUR=0 && REPO=0 &&
    Note "w" $"invalid option: '-r/--repo' and '-a/--aur' may not be used together, disabling both"

# operations
case "$OPERATION" in
    edit) # edit (-e) handling
        GetPkgbase "${pkgs[@]}"
        EditPkgs "${pkgsbase[@]}"
        exit;;
    sync)
        # search (-Ss, -s) handling
        if (( SEARCH )); then
            if (( ! AUR )); then
                if (( REFRESH )); then
                    sudo "$PACMAN" ${PACMAN_ARGS[@]} ${PACMAN_OPTS[@]} -- ${pkgs[@]}
                else
                    "$PACMAN" ${PACMAN_ARGS[@]} ${PACMAN_OPTS[@]} -- ${pkgs[@]}
                fi
                exitrepo=$?
            fi
            if (( ! REPO )); then
                auracle search ${AURACLE_OPTS[@]} -- ${pkgs[@]}; exitaur="$?"
            fi
            # exit code
            [[ "$exitrepo" = 0 || "$exitaur" = 0 ]] && exit "$E_OK" || exit "$E_FAIL"
        # info (-Si, -i) handling
        elif (( INFO )); then
            if [[ ! "${pkgs[*]}" ]]; then
                "$PACMAN" ${PACMAN_ARGS[@]} ${PACMAN_OPTS[@]}
            else
                ClassifyPkgs "${pkgs[@]}"
            fi
            if [[ "${repopkgs[*]}" ]]; then
                (( REFRESH )) && sudo "$PACMAN" ${PACMAN_ARGS[@]} ${PACMAN_OPTS[@]} ${repopkgs[@]}
                (( ! REFRESH )) && "$PACMAN" ${PACMAN_ARGS[@]} ${PACMAN_OPTS[@]} ${repopkgs[@]}
            fi
            if [[ "${aurpkgs[*]}" ]]; then
                (( REFRESH && ! "${#repopkgs[*]}" )) && sudo "$PACMAN" -Sy ${PACMAN_OPTS[@]}
                (( ! AUR )) &&
                    Note "i" $"Package(s) ${WHITE}${aurpkgs[*]}${ALL_OFF} not found in repositories, trying ${MAGENTA}AUR${ALL_OFF}..."
                auracle info "${AURACLE_OPTS[@]}" -- "${aurpkgs[@]}"
            fi
        # clean (-Sc) handling
        elif (( CLEANCACHE )); then
            (( ! AUR )) && sudo "$PACMAN" ${PACMAN_ARGS[@]} ${PACMAN_OPTS[@]} ${repopkgs[@]}
            (( ! REPO )) && CleanCache "${pkgs[@]}"
        # sysupgrade (-Su, -u) handling
        elif (( UPGRADE )); then
            [[ "${pkgs[*]}" ]] && ClassifyPkgs "${pkgs[@]}"
            if (( ! AUR )); then
                sudo "$PACMAN" ${PACMAN_ARGS[@]} ${PACMAN_OPTS[@]} ${repopkgs[@]}
                (( $? > 0 && REPO )) && exit "$E_FAIL"
            fi
            if [[ "${aurpkgs[*]}" ]] && (( ! AUR )); then
                Note "i" $"Package(s) ${WHITE}${aurpkgs[*]}${ALL_OFF} not found in repositories, trying ${MAGENTA}AUR${ALL_OFF}..."
            fi
            (( ! REPO )) && Core
        # sync (-S, -y), downloadonly (-Sw, -m), refresh (-Sy)
        else
            if [[ ! "${pkgs[*]}" ]]; then
                sudo "$PACMAN" ${PACMAN_ARGS[@]} ${PACMAN_OPTS[@]}
            else
                ClassifyPkgs "${pkgs[@]}"
            fi
            [[ "${repopkgs[*]}" ]] && sudo "$PACMAN" ${PACMAN_ARGS[@]} ${PACMAN_OPTS[@]} ${repopkgs[@]}
            if [[ "${aurpkgs[*]}" ]]; then
                (( REFRESH && ! "${#repopkgs[*]}" )) && sudo "$PACMAN" -Sy ${PACMAN_OPTS[@]}
                (( ! AUR )) && Note "i" $"Package(s) ${WHITE}${aurpkgs[*]}${ALL_OFF} not found in repositories, trying ${MAGENTA}AUR${ALL_OFF}..."
                Core
            fi
        fi
        exit;;
    upgrades) # upgrades (-Qu) handling
        (( AUR )) || "$PACMAN" ${PACMAN_ARGS[@]} ${PACMAN_OPTS[@]} -- ${pkgs[@]}; exitrepo=$?
        if (( ! REPO )); then
            if [[ ! "${pkgs[*]}" ]]; then
                auracle sync ${AURACLE_OPTS[@]} $("$PACMAN" -qm ${PACMAN_ARGS[@]//-u} ${PACMAN_OPTS[@]//--upgrades})
            else
                auracle sync ${AURACLE_OPTS[@]} -- ${pkgs[@]}
            fi
            exitaur=$?
        fi
        [[ "$exitrepo" = 0 || "$exitaur" = 0 ]] && exit "$E_OK" || exit "$E_FAIL";;
    *) if [[ " ${PACMAN_ARGS[*]} " =~ ' -F ' ]] && (( REFRESH )); then
            sudo "$PACMAN" ${PACMAN_ARGS[@]} ${PACMAN_OPTS[@]} -- ${pkgs[@]}
        elif [[ ! "${pkgs[*]}" ]] ||
            [[ " ${PACMAN_ARGS[*]} " =~ ' '-[DFQTglp]' ' ]] && (( ! ASDEPS && ! ASEXPLICIT )); then
            "$PACMAN" ${PACMAN_ARGS[@]} ${PACMAN_OPTS[@]} -- ${pkgs[@]}
        else
            sudo "$PACMAN" ${PACMAN_ARGS[@]} ${PACMAN_OPTS[@]} -- ${pkgs[@]}
        fi
        exit;; # others operations handling
esac

# vim:set ts=4 sw=4 et:
